<?xml version="1.0"?>

<!-- Smack Build Script ========================================== -->
<!-- Jive Software      ============================================== -->

<!--
    $RCSfile$
    $Revision: 11369 $
    $Date: 2009-11-06 11:34:59 -0500 (Fri, 06 Nov 2009) $
-->

<project name="Smack" default="all" basedir="..">

    <!-- TASKDEFS -->
    <!-- ======================================================================================= -->
    <!-- ======================================================================================= -->

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/build/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <!-- PROPERTIES -->
    <!-- ======================================================================================= -->

    <!-- Smack Version -->
    <property name="version.major" value="3" />
    <property name="version.minor" value="2" />
    <property name="version.revision" value="2" />
    <property name="version.extra" value="ijaeckel" /> 

    <if>
        <equals arg1="${version.extra}" arg2=""/>
        <then>
            <property name="version"
                      value="${version.major}.${version.minor}.${version.revision}"/>
            <property name="version.filename"
                      value="${version}"/>
        </then>
        <else>
            <property name="version"
                      value="${version.major}.${version.minor}.${version.revision}-${version.extra}"/>
            <property name="version.filename"
                      value="${version}"/>
        </else>
    </if>
    <tstamp>
        <format property="builddate" pattern="MM/dd/yyyy"/>
    </tstamp>

    <property file="${basedir}/build/build.properties" />
    <property name="compile.dir" value="target/classes" />
    <property name="compile.smack.dir" value="${basedir}/smack/${compile.dir}" />
    <property name="compile.smack-bosh.dir" value="${basedir}/smack-bosh/${compile.dir}" />
    <property name="compile.smackx.dir" value="${basedir}/smackx/${compile.dir}" />
    <property name="compile.smackx-debug.dir" value="${basedir}/smackx-debug/${compile.dir}" />
    <property name="compile.smackx-jingle.dir" value="${basedir}/smackx-jingle/${compile.dir}" />
    <property name="compile.test.dir" value="target/classes-test" />
    <property name="compile.test.smack.dir" value="${basedir}/smack-test/${compile.test.dir}" />
    <property name="compile.test.smackx.dir" value="${basedir}/smackx-test/${compile.test.dir}" />
    <property name="compile.test.smackx-jingle.dir" value="${basedir}/smackx-jingle-test/${compile.test.dir}" />
    <property name="jar.dest.dir" value="target" />
    <property name="jar.smack.dest.dir" value="${basedir}/smack/${jar.dest.dir}" />
    <property name="jar.smack-bosh.dest.dir" value="${basedir}/smack-bosh/${jar.dest.dir}" />
    <property name="jar.smackx.dest.dir" value="${basedir}/smackx/${jar.dest.dir}" />
    <property name="jar.smackx-debug.dest.dir" value="${basedir}/smackx-debug/${jar.dest.dir}" />
    <property name="jar.smackx-jingle.dest.dir" value="${basedir}/smackx-jingle/${jar.dest.dir}" />
    <property name="jar.test.smack.dest.dir" value="${basedir}/smack-test/${jar.dest.dir}" />
    <property name="jar.test.smackx.dest.dir" value="${basedir}/smackx-test/${jar.dest.dir}" />
    <property name="jar.test.smackx-jingle.dest.dir" value="${basedir}/smackx-jingle-test/${jar.dest.dir}" />
    <property name="javadoc.dest.dir" value="${basedir}/target/apidocs" />
    <property name="release.dest.dir" value="${basedir}/smack-release/target" />
    <property name="lib.build.dir" value="${basedir}/build/lib" />
    <property name="lib.merge.dir" value="${basedir}/build/merge" />
    <property name="src.dir" value="src/main/java" />
    <property name="src.smack.dir" value="${basedir}/smack/${src.dir}" />
    <property name="src.smack-bosh.dir" value="${basedir}/smack-bosh/${src.dir}" />
    <property name="src.smackx.dir" value="${basedir}/smackx/${src.dir}" />
    <property name="src.smackx-debug.dir" value="${basedir}/smackx-debug/${src.dir}" />
    <property name="src.smackx-jingle.dir" value="${basedir}/smackx-jingle/${src.dir}" />
    <property name="src.test.dir" value="src/test/java" />
    <property name="src.test.smack.dir" value="${basedir}/smack-test/${src.test.dir}" />
    <property name="src.test.smackx.dir" value="${basedir}/smackx-test/${src.test.dir}" />
    <property name="src.test.smackx-jingle.dir" value="${basedir}/smackx-jingle-test/${src.test.dir}" />
    <property name="resources.dir" value="src/main/resources" />
    <property name="resources.smack.dir" value="${basedir}/smack/${resources.dir}" />
    <property name="resources.smack-bosh.dir" value="${basedir}/smack-bosh/${resources.dir}" />
    <property name="resources.smackx.dir" value="${basedir}/smackx/${resources.dir}" />
    <property name="resources.smackx-debug.dir" value="${basedir}/smackx-debug/${resources.dir}" />
    <property name="resources.smackx-jingle.dir" value="${basedir}/smackx-jingle/${resources.dir}" />
    <property name="resources.test.dir" value="src/test/resources" />
    <property name="resources.test.smack.dir" value="${basedir}/smack-test/${resources.test.dir}" />
    <property name="resources.test.smackx.dir" value="${basedir}/smackx-test/${resources.test.dir}" />
    <property name="resources.test.smackx-jingle.dir" value="${basedir}/smackx-jingle-test/${resources.test.dir}" />

    <!-- Test props - override these defaults in the properties file or in command line -->
    <property name="test.host" value="localhost" />
    <property name="test.port" value="5222" />
    <property name="test.admin.username" value="admin" />
    <property name="test.admin.password" value="admin" />
    <property name="test.admin.resource" value="Test" />
    <property name="test.smack.debug" value="false" />

    <!-- PATHS, DEPENDIENCIES, PATTERNS -->
    <!-- ======================================================================================= -->
    <!-- ======================================================================================= -->

    <path id="compile.smack.dependencies">
        <fileset dir="${lib.merge.dir}/smack" includes="*.jar"/>
    </path>

    <path id="compile.smack-bosh.dependencies">
        <path refid="compile.smack.dependencies"/>
        <pathelement path="${compile.smack.dir}"/>
        <fileset dir="${lib.merge.dir}/smack-bosh" includes="*.jar"/>
    </path>

    <path id="compile.smackx.dependencies">
        <path refid="compile.smack.dependencies"/>
        <pathelement path="${compile.smack.dir}"/>
    </path>

    <path id="compile.smackx-debug.dependencies">
        <path refid="compile.smackx.dependencies"/>
        <pathelement path="${compile.smackx.dir}"/>
    </path>

    <path id="compile.smackx-jingle.dependencies">
        <path refid="compile.smackx.dependencies"/>
        <pathelement path="${compile.smackx.dir}"/>
        <fileset dir="${lib.build.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.merge.dir}/smackx-jingle">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="compile.test.smack.dependencies">
        <path refid="compile.smack.dependencies"/>
        <pathelement path="${compile.smack.dir}"/>
        <fileset dir="${lib.build.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="compile.test.smackx.dependencies">
        <path refid="compile.smackx.dependencies"/>
        <pathelement path="${compile.smackx.dir}"/>
        <pathelement path="${compile.test.smack.dir}"/>
        <fileset dir="${lib.build.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="compile.test.smackx-jingle.dependencies">
        <path refid="compile.smackx-jingle.dependencies"/>
        <pathelement path="${compile.smackx-jingle.dir}"/>
        <pathelement path="${compile.test.smack.dir}"/>
        <fileset dir="${lib.build.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="javadoc.sources">
        <pathelement path="${src.smack.dir}"/>
        <pathelement path="${src.smack-bosh.dir}"/>
        <pathelement path="${src.smackx.dir}"/>
        <pathelement path="${src.smackx-debug.dir}"/>
        <pathelement path="${src.smackx-jingle.dir}"/>
    </path>

    <patternset id="test.cases">
        <include name="**/*Test.java" />
    </patternset>

    <!-- TARGETS -->
    <!-- ======================================================================================= -->

    <!-- all -->
    <!-- ======================================================================================= -->
    <target name="all" depends="jar" description="Calls 'jar' target by default">
    </target>


    <!-- init -->
    <target name="init" description="Prepare build environment">
    </target>

    <!-- compile -->
    <!-- ======================================================================================= -->
    <target name="compile-smack" depends="init" description="Compiles smack core.">
        <!-- prepare output directory -->
        <mkdir dir="${compile.smack.dir}" />

        <!-- prepare java resources -->
        <available file="${resources.smack.dir}" type="dir" property="resources.smack.dir.found"/>
        <if>
            <equals arg1="${resources.smack.dir.found}" arg2="true"/>
            <then>
                <copy todir="${compile.smack.dir}">
                    <fileset dir="${resources.smack.dir}" includes="**/*.*"/>
                </copy>
            </then>
        </if>

        <!-- compile java sources -->
        <javac
                destdir="${compile.smack.dir}"
                includeAntRuntime="no"
                debug="on"
                source="1.5"
                target="1.5" >
            <src path="${src.smack.dir}" />
            <classpath>
                <path refid="compile.smack.dependencies"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-smack-bosh" depends="compile-smack" description="Compiles smack bosh extension.">
        <!-- prepare output directory -->
        <mkdir dir="${compile.smack-bosh.dir}" />

        <!-- prepare java resources -->
        <available file="${resources.smack-bosh.dir}" type="dir" property="resources.smack-bosh.dir.found"/>
        <if>
            <equals arg1="${resources.smack-bosh.dir.found}" arg2="true"/>
            <then>
                <copy todir="${compile.smack-bosh.dir}">
                    <fileset dir="${resources.smack-bosh.dir}" includes="**/*.*"/>
                </copy>
            </then>
        </if>

        <!-- compile java sources -->
        <javac
                destdir="${compile.smack-bosh.dir}"
                includeAntRuntime="no"
                debug="on"
                source="1.5"
                target="1.5" >
            <src path="${src.smack-bosh.dir}" />
            <classpath>
                <path refid="compile.smack-bosh.dependencies"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-smackx" depends="compile-smack" description="Compiles smack extensions.">
        <!-- prepare output directory -->
        <mkdir dir="${compile.smackx.dir}" />

        <!-- prepare java resources -->
        <available file="${resources.smackx.dir}" type="dir" property="resources.smackx.dir.found"/>
        <if>
            <equals arg1="${resources.smackx.dir.found}" arg2="true"/>
            <then>
                <copy todir="${compile.smackx.dir}">
                    <fileset dir="${resources.smackx.dir}" includes="**/*.*"/>
                </copy>
            </then>
        </if>

        <!-- compile java sources -->
        <javac
                destdir="${compile.smackx.dir}"
                includeAntRuntime="no"
                debug="on"
                source="1.5"
                target="1.5" >
            <src path="${src.smackx.dir}" />
            <classpath>
                <path refid="compile.smackx.dependencies"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-smackx-debug" depends="compile-smackx" description="Compiles smack enhanced debug console.">
        <!-- prepare output directory -->
        <mkdir dir="${compile.smackx-debug.dir}" />

        <!-- prepare java resources -->
        <available file="${resources.smackx-debug.dir}" type="dir" property="resources.smackx-debug.dir.found"/>
        <if>
            <equals arg1="${resources.smackx-debug.dir.found}" arg2="true"/>
            <then>
                <copy todir="${compile.smackx-debug.dir}">
                    <fileset dir="${resources.smackx-debug.dir}" includes="**/*.*"/>
                </copy>
            </then>
        </if>

        <!-- compile java sources -->
        <javac
                destdir="${compile.smackx-debug.dir}"
                includeAntRuntime="no"
                debug="on"
                source="1.5"
                target="1.5" >
            <src path="${src.smackx-debug.dir}" />
            <classpath>
                <path refid="compile.smackx-debug.dependencies"/>
            </classpath>
        </javac>
        <mkdir dir="${compile.smackx-debug.dir}" />
    </target>

    <target name="compile-smackx-jingle" depends="compile-smackx" description="Compiles smack jingle extensions.">
        <!-- prepare output directory -->
        <mkdir dir="${compile.smackx-jingle.dir}" />

        <!-- prepare java resources -->
        <available file="${resources.smackx-jingle.dir}" type="dir" property="resources.smackx-jingle.dir.found"/>
        <if>
            <equals arg1="${resources.smackx-jingle.dir.found}" arg2="true"/>
            <then>
                <copy todir="${compile.smackx-jingle.dir}">
                    <fileset dir="${resources.smackx-jingle.dir}" includes="**/*.*"/>
                </copy>
            </then>
        </if>

        <!-- compile java sources -->
        <javac
                destdir="${compile.smackx-jingle.dir}"
                includeAntRuntime="no"
                debug="on"
                source="1.5"
                target="1.5" >
            <src path="${src.smackx-jingle.dir}" />
            <classpath>
                <path refid="compile.smackx-jingle.dependencies"/>
            </classpath>
        </javac>
    </target>

    <target
            name="compile"
            depends="compile-smack, compile-smack-bosh, compile-smackx-debug, compile-smackx-jingle"
            description="Compiles all source.">
        <echo>Compiliation finished!</echo>
    </target>

    <!-- compile-test -->
    <!-- ======================================================================================= -->
    <target name="compile-smack-test" depends="compile-smack" description="Compiles smack core tests.">
        <!-- prepare output directory -->
        <mkdir dir="${compile.test.smack.dir}" />

        <!-- prepare java resources -->
        <available file="${resources.test.smack.dir}" type="dir" property="resources.test.smack.dir.found"/>
        <if>
            <equals arg1="${resources.test.smack.dir.found}" arg2="true"/>
            <then>
                <copy todir="${compile.test.smack.dir}">
                    <fileset dir="${resources.test.smack.dir}" includes="**/*.*"/>
                </copy>
            </then>
        </if>

        <!-- compile java sources -->
        <javac
                destdir="${compile.test.smack.dir}"
                includeAntRuntime="no"
                debug="on"
                source="1.5"
                target="1.5" >
            <src path="${src.test.smack.dir}" />
            <classpath>
                <path refid="compile.test.smack.dependencies"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-smackx-test" depends="compile-smackx, compile-smack-test" description="Compiles smack extension tests.">
        <!-- prepare output directory -->
        <mkdir dir="${compile.test.smackx.dir}" />

        <!-- prepare java resources -->
        <available file="${resources.test.smackx.dir}" type="dir" property="resources.test.smackx.dir.found"/>
        <if>
            <equals arg1="${resources.test.smackx.dir.found}" arg2="true"/>
            <then>
                <copy todir="${compile.test.smackx.dir}">
                    <fileset dir="${resources.test.smackx.dir}" includes="**/*.*"/>
                </copy>
            </then>
        </if>

        <!-- compile java sources -->
        <javac
                destdir="${compile.test.smackx.dir}"
                includeAntRuntime="no"
                debug="on"
                source="1.5"
                target="1.5" >
            <src path="${src.test.smackx.dir}" />
            <classpath>
                <path refid="compile.test.smackx.dependencies"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-smackx-jingle-test" depends="compile-smackx-jingle, compile-smack-test" description="Compiles smack jingle extension tests.">
        <!-- prepare output directory -->
        <mkdir dir="${compile.test.smackx-jingle.dir}" />

        <!-- prepare java resources -->
        <available file="${resources.test.smackx-jingle.dir}" type="dir" property="resources.test.smackx-jingle.dir.found"/>
        <if>
            <equals arg1="${resources.test.smackx-jingle.dir.found}" arg2="true"/>
            <then>
                <copy todir="${compile.test.smackx-jingle.dir}">
                    <fileset dir="${resources.test.smackx-jingle.dir}" includes="**/*.*"/>
                </copy>
            </then>
        </if>

        <!-- compile java sources -->
        <javac
                destdir="${compile.test.smackx-jingle.dir}"
                includeAntRuntime="no"
                debug="on"
                source="1.5"
                target="1.5" >
            <src path="${src.test.smackx-jingle.dir}" />
            <classpath>
                <path refid="compile.test.smackx-jingle.dependencies"/>
            </classpath>
        </javac>
    </target>

    <target
            name="compile-test"
            depends="compile-smack-test, compile-smackx-test, compile-smackx-jingle-test"
            description="Compiles all test source.">
        <echo>Compiliation of tests finished!</echo>
    </target>

    <!-- jar -->
    <!-- ======================================================================================= -->
    <target name="jar-smack" depends="compile-smack" description="Produces smack.jar">
        <!-- prepare output directory -->
        <mkdir dir="${jar.smack.dest.dir}" />

        <!-- create jar without dependencies -->
        <jar destfile="${jar.smack.dest.dir}/smack-${version.filename}.jar"
                basedir="${compile.smack.dir}"
                includes="**/*.*" />

        <!-- create jar with dependencies -->
        <jar destfile="${jar.smack.dest.dir}/smack-${version.filename}-jar-with-dependencies.jar"
                basedir="${compile.smack.dir}"
                includes="**/*.*">
            <zipgroupfileset dir="${lib.merge.dir}/smack" includes="*.jar"/>
        </jar>
    </target>

    <target name="jar-smack-bosh" depends="compile-smack-bosh" description="Produces smack-bosh.jar">
        <!-- prepare output directory -->
        <mkdir dir="${jar.smack-bosh.dest.dir}" />

        <!-- create jar without dependencies -->
        <jar destfile="${jar.smack-bosh.dest.dir}/smack-bosh-${version.filename}.jar"
                basedir="${compile.smack-bosh.dir}"
                includes="**/*.*" />

        <!-- create jar with dependencies -->
        <jar destfile="${jar.smack-bosh.dest.dir}/smack-bosh-${version.filename}-jar-with-dependencies.jar"
                basedir="${compile.smack-bosh.dir}"
                includes="**/*.*">
            <zipgroupfileset dir="${lib.merge.dir}/smack-bosh" includes="*.jar"/>
        </jar>
    </target>

    <target name="jar-smackx" depends="compile-smackx" description="Produces smackx.jar">
        <!-- prepare output directory -->
        <mkdir dir="${jar.smackx.dest.dir}" />

        <!-- create jar without dependencies -->
        <jar destfile="${jar.smackx.dest.dir}/smackx-${version.filename}.jar"
                basedir="${compile.smackx.dir}"
                includes="**/*.*" />

        <!-- create jar with dependencies -->
        <jar destfile="${jar.smackx.dest.dir}/smackx-${version.filename}-jar-with-dependencies.jar"
                basedir="${compile.smackx.dir}"
                includes="**/*.*">
            <!-- <zipgroupfileset dir="${lib.merge.dir}/smackx" includes="*.jar"/> -->
        </jar>
    </target>

    <target name="jar-smackx-debug" depends="compile-smackx-debug" description="Produces smackx-debug.jar">
        <!-- prepare output directory -->
        <mkdir dir="${jar.smackx-debug.dest.dir}" />

        <!-- create jar without dependencies -->
        <jar destfile="${jar.smackx-debug.dest.dir}/smackx-debug-${version.filename}.jar"
                basedir="${compile.smackx-debug.dir}"
                includes="**/*.*" />

        <!-- create jar with dependencies -->
        <jar destfile="${jar.smackx-debug.dest.dir}/smackx-debug-${version.filename}-jar-with-dependencies.jar"
                basedir="${compile.smackx-debug.dir}"
                includes="**/*.*">
            <!-- <zipgroupfileset dir="${lib.merge.dir}/smackx-debug" includes="*.jar"/> -->
        </jar>
    </target>

    <target name="jar-smackx-jingle" depends="compile-smackx-jingle" description="Produces smackx-jingle.jar">
        <!-- prepare output directory -->
        <mkdir dir="${jar.smackx-jingle.dest.dir}" />

        <!-- create jar without dependencies -->
        <jar destfile="${jar.smackx-jingle.dest.dir}/smackx-jingle-${version.filename}.jar"
                basedir="${compile.smackx-jingle.dir}"
                includes="**/*.*" />

        <!-- create jar with dependencies -->
        <jar destfile="${jar.smackx-jingle.dest.dir}/smackx-jingle-${version.filename}-jar-with-dependencies.jar"
                basedir="${compile.smackx-jingle.dir}"
                includes="**/*.*">
            <zipgroupfileset dir="${lib.merge.dir}/smackx-jingle" includes="*.jar"/>
        </jar>
    </target>

    <target
            name="jar"
            depends="compile, jar-smack, jar-smack-bosh, jar-smackx, jar-smackx-debug, jar-smackx-jingle"
            description="Produces all packages.">
        <echo>Package finished!</echo>
    </target>

    <!-- jar-test -->
    <!-- ======================================================================================= -->
    <target
            name="jar-test-smack"
            depends="compile-smack-test, test-smack"
            description="Produces smack-test.jar">
        <!-- prepare output directory -->
        <mkdir dir="${jar.test.smack.dest.dir}" />

        <!-- create jar without dependencies -->
        <jar destfile="${jar.test.smack.dest.dir}/smack-test-${version.filename}.jar"
                basedir="${compile.test.smack.dir}"
                includes="**/*.*" />
    </target>

    <target
            name="jar-test-smackx"
            depends="compile-smackx-test, test-smackx"
            description="Produces smackx-test.jar">
        <!-- prepare output directory -->
        <mkdir dir="${jar.test.smackx.dest.dir}" />

        <!-- create jar without dependencies -->
        <jar destfile="${jar.test.smackx.dest.dir}/smackx-test-${version.filename}.jar"
                basedir="${compile.test.smackx.dir}"
                includes="**/*.*" />
    </target>

    <target
            name="jar-test-smackx-jingle"
            depends="compile-smackx-jingle-test, test-smackx-jingle"
            description="Produces smackx-jingle-test.jar">
        <!-- prepare output directory -->
        <mkdir dir="${jar.test.smackx-jingle.dest.dir}" />

        <!-- create jar without dependencies -->
        <jar destfile="${jar.test.smackx-jingle.dest.dir}/smackx-jingle-test-${version.filename}.jar"
                basedir="${compile.test.smackx-jingle.dir}"
                includes="**/*.*" />
    </target>

    <target
            name="jar-test"
            depends="jar-test-smack, jar-test-smackx, jar-test-smackx-jingle"
            description="Produces jar of test code">
        <echo>Test package finished!</echo>
    </target>

    <!-- javadoc -->
    <!-- ======================================================================================= -->
    <target name="javadoc" description="JavaDocs the Smack source code">

        <mkdir dir="${javadoc.dest.dir}" />
        <javadoc
            packagenames="org.jivesoftware.smack.*, org.jivesoftware.smackx.*"
            excludepackagenames="org.jivesoftware.smack.util.collections"
            sourcepathref="javadoc.sources"
            destdir="${javadoc.dest.dir}"
            author="true"
            windowtitle="Smack ${version} Documentation"
            overview="${basedir}/src/main/javadoc/overview.html"
        >
            <classpath>
                <path refid="compile.smack.dependencies"/>
                <path refid="compile.smack-bosh.dependencies"/>
                <path refid="compile.smackx.dependencies"/>
                <path refid="compile.smackx-debug.dependencies"/>
                <path refid="compile.smackx-jingle.dependencies"/>
            </classpath>
            <doctitle><![CDATA[<font face="arial,helvetica">Smack ${version}</font>]]></doctitle>
            <header><![CDATA[<b>Smack</b>]]></header>
            <bottom><![CDATA[<i>Copyright &copy; 2003-2007 Jive Software. </i>]]></bottom>
            <link href="http://java.sun.com/j2se/1.5/docs/api/" />
            <link href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/api/" />
        </javadoc>
    </target>


    <!-- test -->
    <!-- ======================================================================================= -->
    <target name="func-test" depends="compile, jar-test" unless="no.test">
        <antcall target="test.messenger"/>
        <antcall target="test"/>
    </target>


    <!-- test -->
    <!-- ======================================================================================= -->
    <target name="test-smack" depends="compile-smack-test" unless="no.test">
        <junit printsummary="on"
            fork="true"
            haltonfailure="false"
            failureproperty="tests.failed"
            showoutput="true">

            <sysproperty key="smack.test.host" value="${test.host}" />
            <sysproperty key="smack.test.port" value="${test.port}" />
            <sysproperty key="smack.test.admin.username" value="${test.admin.username}" />
            <sysproperty key="smack.test.admin.password" value="${test.admin.password}" />
            <sysproperty key="smack.test.admin.resource" value="${test.admin.resource}" />
            <sysproperty key="smack.debug" value="${test.smack.debug}" />

            <classpath>
                <path refid="compile.test.smack.dependencies"/>
                <pathelement path="${compile.test.smack.dir}"/>
                <pathelement path="${compile.smackx.dir}"/>
            </classpath>

            <formatter type="brief" usefile="false"/>

            <batchtest>
                <fileset dir="${src.test.smack.dir}">
                    <patternset refid="test.cases" />
                </fileset>
            </batchtest>
        </junit>

        <fail if="tests.failed" message="** Tests failed, see test log. **" />
    </target>

    <target name="test-smackx" depends="compile-smack-test" unless="no.test">
        <junit printsummary="on"
            fork="true"
            haltonfailure="false"
            failureproperty="tests.failed"
            showoutput="true">

            <sysproperty key="smack.test.host" value="${test.host}" />
            <sysproperty key="smack.test.port" value="${test.port}" />
            <sysproperty key="smack.test.admin.username" value="${test.admin.username}" />
            <sysproperty key="smack.test.admin.password" value="${test.admin.password}" />
            <sysproperty key="smack.test.admin.resource" value="${test.admin.resource}" />
            <sysproperty key="smack.debug" value="${test.smack.debug}" />

            <classpath>
                <path refid="compile.test.smackx.dependencies"/>
                <pathelement path="${compile.test.smackx.dir}"/>
            </classpath>

            <formatter type="brief" usefile="false"/>

            <batchtest>
                <fileset dir="${src.test.smackx.dir}">
                    <patternset refid="test.cases" />
                </fileset>
            </batchtest>
        </junit>

        <fail if="tests.failed" message="** Tests failed, see test log. **" />
    </target>

    <target name="test-smackx-jingle" depends="compile-smack-test" unless="no.test">
        <junit printsummary="on"
            fork="true"
            haltonfailure="false"
            failureproperty="tests.failed"
            showoutput="true">

            <sysproperty key="smack.test.host" value="${test.host}" />
            <sysproperty key="smack.test.port" value="${test.port}" />
            <sysproperty key="smack.test.admin.username" value="${test.admin.username}" />
            <sysproperty key="smack.test.admin.password" value="${test.admin.password}" />
            <sysproperty key="smack.test.admin.resource" value="${test.admin.resource}" />
            <sysproperty key="smack.debug" value="${test.smack.debug}" />

            <classpath>
                <path refid="compile.test.smackx-jingle.dependencies"/>
                <pathelement path="${compile.test.smackx-jingle.dir}"/>
            </classpath>

            <formatter type="brief" usefile="false"/>

            <batchtest>
                <fileset dir="${src.test.smackx-jingle.dir}">
                    <patternset refid="test.cases" />
                </fileset>
            </batchtest>
        </junit>

        <fail if="tests.failed" message="** Tests failed, see test log. **" />
    </target>

    <target name="test" depends="compile-test, test-smack, test-smackx, test-smackx-jingle" unless="no.test" />


    <!-- release -->
    <!-- ======================================================================================= -->
    <target name="release" description="Builds a release" if="release.exists" depends="release-exists">
        <antcall target="jar">
            <param name="no.test" value="true" />
        </antcall>
        <antcall target="javadoc">
            <param name="no.test" value="true" />
        </antcall>
        <ant antfile="${basedir}/build/release.xml" />
    </target>

    <!-- checkcode -->
    <!-- ======================================================================================= -->
    <target name="checkcode" >
        <mkdir dir="${basedir}/target"/>
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
            <classpath>
                <pathelement location="${basedir}/build/pmd.jar" />
                <pathelement location="${basedir}/build/asm.jar" />
                <pathelement location="${basedir}/build/jaxen.jar" />
            </classpath>
        </taskdef>
        <pmd shortFilenames="true">
            <ruleset>migrating</ruleset>
            <ruleset>finalizers</ruleset>
            <formatter type="html" toFile="${basedir}/target/pmd_report.html" toConsole="true" />
            <fileset dir="${src.smack.dir}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${src.smack-bosh.dir}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${src.smackx.dir}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${src.smackx-debug.dir}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${src.smackx-jingle.dir}">
                <include name="**/*.java" />
            </fileset>
        </pmd>
    </target>

    <!-- release-exists -->
    <!-- ======================================================================================= -->
    <target name="release-exists" >
        <available file="${basedir}/build/release.xml" property="release.exists"/>
    </target>


    <!-- clean -->
    <!-- ======================================================================================= -->
    <target name="clean" description="Deletes all generated content.">
        <delete dir="${javadoc.dest.dir}" />
        <delete dir="${compile.smack.dir}" />
        <delete dir="${compile.smack-bosh.dir}" />
        <delete dir="${compile.smackx.dir}" />
        <delete dir="${compile.smackx-debug.dir}" />
        <delete dir="${compile.smackx-jingle.dir}" />
        <delete dir="${compile.test.smack.dir}" />
        <delete dir="${compile.test.smackx.dir}" />
        <delete dir="${compile.test.smackx-jingle.dir}" />
        <delete dir="${basedir}/target" />
        <delete dir="${basedir}/smack/target" />
        <delete dir="${basedir}/smack-bosh/target" />
        <delete dir="${basedir}/smack-release/target" />
        <delete dir="${basedir}/smack-test/target" />
        <delete dir="${basedir}/smackx/target" />
        <delete dir="${basedir}/smackx-debug/target" />
        <delete dir="${basedir}/smackx-test/target" />
        <delete dir="${basedir}/smackx-jingle/target" />
        <delete dir="${basedir}/smackx-jingle-test/target" />
    </target>

</project>
