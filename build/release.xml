<?xml version="1.0"?>

<!-- Smack Build Script ========================================== -->
<!-- Jive Software      ============================================== -->

<!--
    $RCSfile$
    $Revision$
    $Date$
-->

<project name="Smack Release Script" default="all" basedir="..">

    <!-- Include Ant Optional Tasks -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/build/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <!-- PROPERTIES -->
    <!-- ======================================================================================= -->

    <!-- TARGETS -->
    <!-- ======================================================================================= -->

    <!-- all -->
    <!-- ======================================================================================= -->
    <target name="all">
        <!-- create release properties -->
        <if>
            <equals arg1="${dailybuild}" arg2="true" />
            <then>
                <tstamp>
                    <format property="build.date" pattern="yyyy-MM-dd" locale="en"/>
                </tstamp>
                <property name="release.name" value="smack-${build.date}" />
                <property name="release-dev.name" value="smack-${build.date}-src" />
            </then>
            <else>
                <property name="release.name" value="smack-release-${version.filename}" />
                <property name="release-dev.name" value="smack-release-${version.filename}-src" />
            </else>
        </if>
        <property name="release.dir" value="${basedir}/smack-release/target/${release.name}" />
        <property name="release-dev.dir" value="${basedir}/smack-release/target/${release-dev.name}" />
        <!-- create release dirs -->
        <mkdir dir="${release.dir}" />
        <mkdir dir="${release-dev.dir}" />
        <!-- Copy smack.jar -->
        <copy
                file="${jar.smack.dest.dir}/smack-${version.filename}-jar-with-dependencies.jar"
                tofile="${release.dir}/smack.jar" />
        <copy
                file="${jar.smack-bosh.dest.dir}/smack-bosh-${version.filename}-jar-with-dependencies.jar"
                tofile="${release.dir}/smack-bosh.jar" />
        <copy
                file="${jar.smackx.dest.dir}/smackx-${version.filename}-jar-with-dependencies.jar"
                tofile="${release.dir}/smackx.jar" />
        <copy
                file="${jar.smackx-debug.dest.dir}/smackx-debug-${version.filename}-jar-with-dependencies.jar"
                tofile="${release.dir}/smackx-debug.jar" />
        <copy
                file="${jar.smackx-jingle.dest.dir}/smackx-jingle-${version.filename}-jar-with-dependencies.jar"
                tofile="${release.dir}/smackx-jingle.jar" />
        <copy
                file="${jar.smack.dest.dir}/smack-${version.filename}-jar-with-dependencies.jar"
                tofile="${release-dev.dir}/smack.jar" />
        <copy
                file="${jar.smack-bosh.dest.dir}/smack-bosh-${version.filename}-jar-with-dependencies.jar"
                tofile="${release-dev.dir}/smack-bosh.jar" />
        <copy
                file="${jar.smackx.dest.dir}/smackx-${version.filename}-jar-with-dependencies.jar"
                tofile="${release-dev.dir}/smackx.jar" />
        <copy
                file="${jar.smackx-debug.dest.dir}/smackx-debug-${version.filename}-jar-with-dependencies.jar"
                tofile="${release-dev.dir}/smackx-debug.jar" />
        <copy
                file="${jar.smackx-jingle.dest.dir}/smackx-jingle-${version.filename}-jar-with-dependencies.jar"
                tofile="${release-dev.dir}/smackx-jingle.jar" />
        <!-- Copy build dir -->
        <copy todir="${release-dev.dir}/build">
            <fileset dir="${basedir}/build">
                <include name="ant*" />
                <include name="pmd.jar" />
                <include name="build.xml" />
                <include name="lib/*.jar" />
                <include name="merge/**/*.jar" />
            </fileset>
        </copy>
        <!-- Copy Javadocs -->
        <copy todir="${release.dir}/javadoc">
            <fileset dir="${javadoc.dest.dir}" includes="**/*.*" />
        </copy>
        <copy todir="${release-dev.dir}/javadoc">
            <fileset dir="${javadoc.dest.dir}" includes="**/*.*" />
        </copy>
        <!-- Copy documentation -->
        <copy todir="${release.dir}/documentation">
            <fileset dir="${basedir}/documentation" includes="**/*.*" />
        </copy>
        <copy todir="${release-dev.dir}/documentation">
            <fileset dir="${basedir}/documentation" includes="**/*.*" />
        </copy>
        <!-- Copy source -->
        <copy todir="${release-dev.dir}">
            <fileset dir="${basedir}" includes="src/**/**" />
            <fileset dir="${basedir}" includes="*/src/**/**" />
            <fileset dir="${basedir}" includes="**/pom.xml" />
        </copy>
        <!-- Copy readme.html and changelog.html -->
        <copy todir="${release.dir}">
            <fileset dir="${basedir}/smack-release/src/main/resources" includes="README.html, changelog.html" />
            <filterset>
                <filter token="builddate" value="${builddate}"/>
                <filter token="version" value="${version}"/>
            </filterset>
        </copy>
        <copy todir="${release-dev.dir}">
            <fileset dir="${basedir}/smack-release/src/main/resources" includes="*.html" />
            <filterset>
                <filter token="builddate" value="${builddate}"/>
                <filter token="version" value="${version}"/>
            </filterset>
        </copy>
        <!-- Package -->
        <if>
            <equals arg1="${dailybuild}" arg2="true" />
            <then>
                <zip destfile="${release.dest.dir}/${release-dev.name}.zip"
                    basedir="${release-dev.dir}/.."
                    includes="${release-dev.name}/**/*.*"
                />
                <tar destfile="${release.dest.dir}/${release-dev.name}.tar.gz"
                    basedir="${release-dev.dir}/.."
                    includes="${release-dev.name}/**/*.*"
                    compression="gzip"
                />
            </then>
            <else>
                <zip destfile="${release.dest.dir}/${release.name}.zip"
                    basedir="${release.dir}/.."
                    includes="${release.name}/**/*.*"
                />
                <tar destfile="${release.dest.dir}/${release.name}.tar.gz"
                    basedir="${release.dir}/.."
                    includes="${release.name}/**/*.*"
                    compression="gzip"
                />
                <zip destfile="${release.dest.dir}/${release-dev.name}.zip"
                    basedir="${release-dev.dir}/.."
                    includes="${release-dev.name}/**/*.*"
                />
                <tar destfile="${release.dest.dir}/${release-dev.name}.tar.gz"
                    basedir="${release-dev.dir}/.."
                    includes="${release-dev.name}/**/*.*"
                    compression="gzip"
                />
            </else>
        </if>

        <echo>
-----------------------------------------------
Release made, testing Ant targets of release...
-----------------------------------------------
        </echo>

        <!-- call the release tester -->
        <antcall target="test" />
    </target>

    <!-- test -->
    <!-- ======================================================================================= -->
    <target name="test">
        <property name="testdir" value="${release-dev.dir}/.test" />

        <!-- copy the build to a temp dir so we can run sanity tests -->
        <mkdir dir="${testdir}" />
        <copy todir="${testdir}">
            <fileset dir="${release-dev.dir}">
                <exclude name=".test/**/*.*" />
            </fileset>
        </copy>

        <!-- run sanity tests -->
        <ant dir="${testdir}" antfile="build/build.xml" target="jar" inheritAll="false">
            <property name="no.test" value="true" />
        </ant>
        <ant dir="${testdir}" antfile="build/build.xml" target="javadoc" inheritAll="false">
            <property name="no.test" value="true" />
        </ant>
        <ant dir="${testdir}" antfile="build/build.xml" target="clean" inheritAll="false">
            <property name="no.test" value="true" />
        </ant>

        <echo>
----------------------------
...release tests pass, done.
----------------------------
        </echo>
    </target>

</project>
